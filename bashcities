#!/bin/bash

# Copyright: Ren Tatsumoto
# License: GNU GPL, version 3 or later; http://www.gnu.org/licenses/gpl.html

set -euo pipefail

readonly NC='\033[0m'
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'

readonly config_dir=${XDG_CONFIG_HOME:-$HOME/.config}/neocities
declare site_directory="" api_key="" ignore_regex="" n_concurrent_tasks=4

assert_api_key() {
	if [[ -z $api_key ]]; then
		echo -e "${RED}API key is not set. Did you forget to specify --profile?${NC}" >&2
		return 1
	fi
}

assert_site_directory() {
	if [[ -z $site_directory ]]; then
		echo -e "${RED}Site directory is not set. Did you forget to specify --profile?${NC}" >&2
		return 1
	fi
}

request() {
	curl -s -H "Authorization: Bearer $api_key" "$@" || true
}

list() {
	request "https://neocities.org/api/list"
}

info() {
	request "https://neocities.org/api/info"
}

sitename() {
	info | grep -Po '(?<="sitename":\s").*(?=")'
}

list_remote_files_and_sums() {
	# For each remote file, print its relative path and sha1 sum
	list | python3 -c '
import sys, json
content = json.loads(sys.stdin.read())
for file_info in content["files"]:
    if file_info["is_directory"] is False:
        print(file_info["path"], file_info["sha1_hash"], sep="\t")
'
}

list_remote_files() {
	list_remote_files_and_sums | cut -f1
}

download_backup() {
	# Download the entire site to the current directory.
	local -r site_name=$(sitename)
	local -r backup_folder="${site_name:?}-$(date -u)"
	local full_url rel_path
	mkdir -p "$backup_folder" && cd -- "$backup_folder" || exit 1

	while IFS= read -r rel_path; do
		full_url="https://$site_name.neocities.org/$rel_path"
		mkdir -p -- "$(dirname -- "$rel_path")"
		if curl -s "$full_url" -o "$rel_path"; then
			echo -e "${GREEN}[OK]${NC} $rel_path"
		else
			echo -e "${RED}[FAIL]${NC} $rel_path"
		fi
	done <<<"$(list_remote_files_and_sums | cut -f1)"
}

filter_out_git_files() {
	grep -Pv '(/|^)\.git(ignore)?($|/)'
}

list_local_files() {
	if [[ ${no_git-} == true ]]; then
		find . -type f -printf '%p\n' |
			sed -e 's|^\./||'
	else
		cd -- "$(git rev-parse --show-toplevel)" || exit 1
		git ls-files
	fi | filter_out_git_files || true
}

list_pending_file_changes() {
	local -A local_sums remote_sums
	local rel_path remote_sum

	# Remember local checksums
	while IFS= read -r rel_path; do
		if [[ -n $ignore_regex ]] && [[ $rel_path =~ $ignore_regex ]]; then
			continue
		fi
		local_sums[$rel_path]=$(sha1sum -- "$rel_path" | cut -f1 -d' ')
	done <<<"$(list_local_files)"

	# Remember remote checksums
	while IFS=$'\t' read -r rel_path remote_sum; do
		remote_sums[$rel_path]=$remote_sum
	done <<<"$(list_remote_files_and_sums)"

	# List files to be updated
	for rel_path in "${!local_sums[@]}"; do
		if [[ "${local_sums[$rel_path]}" != "${remote_sums[$rel_path]-}" ]]; then
			echo -e "upload\t$rel_path"
		fi
	done | sort -u

	# List files to be deleted
	for rel_path in "${!remote_sums[@]}"; do
		if [[ -z "${local_sums[$rel_path]-}" ]]; then
			echo -e "delete\t$rel_path"
		fi
	done | sort -u
}

print_pending_file_changes() {
	local text=""
	if [[ -n ${text:=$(list_pending_file_changes)} ]]; then
		echo "Pending changes on the remote:"
		echo "$text"
	else
		echo "The site is up to date."
	fi
}

upload() {
	local -r file=$1
	if [[ -f $file ]]; then
		request -F "$file=@$file" "https://neocities.org/api/upload" | parse_request_result "upload"
	else
		echo "'$file' is not a file or doesn't exist."
	fi
}

delete() {
	local -r file=$1
	request -d "filenames[]=$file" "https://neocities.org/api/delete" | parse_request_result "delete"
}

parse_request_result() {
	local -r msg=$(cat -) explanation=$1
	if echo "$msg" | grep -q -P '"result":\s*"success"'; then
		echo -e "${GREEN}[${explanation^^}]${NC} ${file:?}"
	else
		echo -e "${RED}[FAIL]${NC} ${file:?}"
		if [[ ${verbose-} == true ]]; then
			echo "Server returned: \"$msg\""
		fi
	fi
}

block_if_queue_is_full() {
	while [[ $(jobs -lr | wc -l) -gt $n_concurrent_tasks ]]; do
		wait -n
	done
}

update_site() {
	local action rel_path
	while IFS=$'\t' read -r action rel_path; do
		if [[ -n $action ]] && [[ -n $rel_path ]]; then
			"$action" "$rel_path" &
		fi
		block_if_queue_is_full
	done <<<"$(list_pending_file_changes)"
	wait
}

read_config() {
	local -r config_filepath=${1:?}
	# shellcheck source=/dev/null
	if [[ -f ${config_filepath} ]]; then
		source "$config_filepath"
	else
		echo "Can't find config file."
		exit 1
	fi
	readonly site_directory api_key ignore_regex n_concurrent_tasks
	if ! [[ -d $site_directory ]]; then
		echo "The site directory doesn't exist."
		exit 1
	fi
	if ! cd -- "$site_directory"; then
		echo "Couldn't cd to $site_directory"
		exit 1
	fi
}

help() {
	local -r prog_name=$(basename -- "$(readlink -f -- "$0")")

	echo "Usage: $prog_name [OPTION] [FILE]"
	echo
	echo "A Neocities client written in Bash."
	echo
	echo "Options:"
	column -t -s'|' <<-EOF
		-h, --help|display this help text and exit
		-V, --verbose|verbose mode
		-p, --profile|specify the desired profile name
		-n, --no-git|don't use git to list files
		init NAME|create a new profile with NAME
		push|upload all files that differ from the remote
		status|lists all files that differ from the remote
		list|print all remote files
		list --local|print all local files
		download|download a backup of the site
		upload FILE|upload a file
		delete FILE|delete a file from the remote
	EOF
	echo
	echo "$prog_name home page: https://github.com/tatsumoto-ren/bashcities"
}

init() {
	local -r new_config=$config_dir/$user
	mkdir -p -- "$config_dir"
	if [[ -f $new_config ]]; then
		echo "This profile already exists."
	else
		cat <<-'EOF' >"$new_config"
			site_directory=~/Documents/my_site
			api_key=da77c3530c30593663bf7b797323e48c
			ignore_regex='\.md$|\.gitignore$|(^|/)drafts/'
			n_concurrent_tasks=16
		EOF
		echo "Created a new config file: '$new_config'."
		echo "Edit it to specify the parameters of your site."
	fi
}

with_stash() {
	if [[ ${no_git-} == true ]]; then
		"$@"
	else
		git stash >/dev/null
		"$@"
		git stash pop >/dev/null
	fi
}

main() {
	if (($# == 0)); then
		help
		exit
	fi
	local -a execute_later=()
	while (($# > 0)); do
		case $1 in
		-h | --help)
			help
			exit
			;;
		-V | --verbose)
			readonly verbose=true
			;;
		-n | --no-git)
			readonly no_git=true
			;;
		-p | --profile)
			shift
			read_config "$config_dir/${1:?Profile name is not set.}"
			;;
		init)
			local -r user=${2:?Please provide a profile name.}
			execute_later+=(init)
			;;
		push)
			execute_later+=(with_stash update_site)
			;;
		status)
			execute_later+=(with_stash print_pending_file_changes)
			;;
		list)
			if [[ ${2-} == '--local' ]]; then
				execute_later+=(list_local_files)
			else
				execute_later+=(list_remote_files)
			fi
			;;
		download)
			execute_later+=(download_backup)
			;;
		upload)
			execute_later+=(upload "$2")
			;;
		delete)
			execute_later+=(delete "$2")
			;;
		"")
			break
			;;
		*)
			echo "Unknown command: '$1'"
			exit 1
			;;
		esac
		shift
	done
	if [[ ${#execute_later[@]} -le 0 ]]; then
		echo "The job to do was not provided."
		help
		exit 1
	else
		assert_site_directory
		assert_api_key
		"${execute_later[@]}" # call the stored args
	fi
}

main "$@"
